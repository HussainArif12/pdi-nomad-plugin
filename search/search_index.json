{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the PDI NOMAD Plugin Documentation \u00b6 Welcome to the official documentation for the PDI NOMAD Plugin ! This plugin provides NOMAD schemas, readers, and parsers for data of materials science synthesis processes in alignment with the FAIR (Findable, Accessible, Interoperable, and Reusable) principles. It serves as a plugin for the Paul Drude Institute (PDI) and inherits from community or standard plugin: nomad-material-processing nomad-measurements Supported Material Processing Techniques \u00b6 Currently, this plugin supports the following material processing techniques: Synthesis from Gas Phase : Supports different Vapor Deposition methods: Vapor Deposition \u2514\u2500\u2500 Phyiscal Vapor Deposition ( PVD ) \u2514\u2500\u2500 Molecular Beam Epitaxy ( MBE ) Synthesis from Solution : Supports Solution Preparation Stay tuned for updates as more methods become available! What You Will Find in This Documentation \u00b6 This documentation builds upon the general NOMAD documentation . Here, you will find comprehensive guides on: Using the Plugin : Step-by-step instructions on how to integrate and use the NOMAD Material Processing Plugin in your NOMAD Oasis. Data Structures and Supported Methods : Detailed descriptions of the available schemas, sections, and supported material processing techniques. Contributing : Learn how you can contribute to the ongoing development of this plugin. About NOMAD \u00b6 NOMAD is an open-source data management platform tailored for materials science, designed to follow the FAIR principles. It offers a robust framework for managing and sharing materials data in a standardized and interoperable manner. To learn more about NOMAD, visit the official homepage . We hope this documentation provides all the information you need to make the most of the NOMAD Measurements Plugin. Feel free to contact us for further questions.","title":"Home"},{"location":"index.html#welcome-to-the-pdi-nomad-plugin-documentation","text":"Welcome to the official documentation for the PDI NOMAD Plugin ! This plugin provides NOMAD schemas, readers, and parsers for data of materials science synthesis processes in alignment with the FAIR (Findable, Accessible, Interoperable, and Reusable) principles. It serves as a plugin for the Paul Drude Institute (PDI) and inherits from community or standard plugin: nomad-material-processing nomad-measurements","title":"Welcome to the PDI NOMAD Plugin Documentation"},{"location":"index.html#supported-material-processing-techniques","text":"Currently, this plugin supports the following material processing techniques: Synthesis from Gas Phase : Supports different Vapor Deposition methods: Vapor Deposition \u2514\u2500\u2500 Phyiscal Vapor Deposition ( PVD ) \u2514\u2500\u2500 Molecular Beam Epitaxy ( MBE ) Synthesis from Solution : Supports Solution Preparation Stay tuned for updates as more methods become available!","title":"Supported Material Processing Techniques"},{"location":"index.html#what-you-will-find-in-this-documentation","text":"This documentation builds upon the general NOMAD documentation . Here, you will find comprehensive guides on: Using the Plugin : Step-by-step instructions on how to integrate and use the NOMAD Material Processing Plugin in your NOMAD Oasis. Data Structures and Supported Methods : Detailed descriptions of the available schemas, sections, and supported material processing techniques. Contributing : Learn how you can contribute to the ongoing development of this plugin.","title":"What You Will Find in This Documentation"},{"location":"index.html#about-nomad","text":"NOMAD is an open-source data management platform tailored for materials science, designed to follow the FAIR principles. It offers a robust framework for managing and sharing materials data in a standardized and interoperable manner. To learn more about NOMAD, visit the official homepage . We hope this documentation provides all the information you need to make the most of the NOMAD Measurements Plugin. Feel free to contact us for further questions.","title":"About NOMAD"},{"location":"contact.html","text":"NOMAD is an open source project that warmly welcomes community projects, contributions, suggestions, bug fixes, and constructive feedback. The contributors to this documentation page are part of the FAIRmat Area A - Synthesis team . You can reach us by different channels. Best option is to join our NOMAD Discord channel and ask us there directly. You can also send as directly an email to the main contributors list: Name E-mail Topics Github profiles Dr. Andrea Albino andrea.albino@physik.hu-berlin.de CVD @aalbino2 Dr. Hampus N\u00e4sstr\u00f6m hampus.naesstroem@physik.hu-berlin.de PVD @hampusnasstrom Sarthak Kapoor, MSc. sarthak.kapoor@physik.hu-berlin.de Solutions @ka-sarthak Dr. Jos\u00e9 Marquez josemarquez@physik.hu-berlin.de General @Pepe-Marquez Dr. Sebastian Br\u00fcckner ( Coordinator ) sebastian.brueckner@physik.hu-berlin.de General @budschi Alternatively, you can also: Open an issue in the Github project , and tag any of us.","title":"Contact"},{"location":"explanation/levelsofschema.html","text":"Levels of schemas in NOMAD \u00b6 It is important to understand the structure and relationship of different types of schemas in NOMAD. Here we break down the levels of schemas and how they interact. For detailed information, please visit the official NOMAD documentation . Types of Schemas in NOMAD \u00b6 NOMAD categorizes its schemas into multiple levels, each serving distinct purposes while ensuring consistent data organization and interoperability: Basic Architecture Sections : These define the overall structure of any entry within NOMAD, regardless of the particular data type. They provide a shared, high-level framework applicable across different use cases, ensuring that every entry adheres to a consistent format. EntryData and ArchiveSection are the two relevant classes to be mentioned here. Every entry in NOMAD must inherit from EntryData , whenever a class is only used as a subsection composed within a more general one, inheriting from ArchiveSection is enough. Base Sections : These are central to NOMAD's data model and are designed to maintain interoperability between different database entries. The base sections follow an entity-activity model tailored for materials science, capturing essential relationships between key entities like samples, instruments, processes, measurements, analyses, experiments, and simulations. The goal is to provide standardized structures for data representation. Note Base sections in NOMAD are abstract and should not be instantiated directly. Instead, users must implement these sections in their own schemas (referred to as user schemas) by inheriting from a base section and nomad.datamodel.EntryData . Users are strongly encouraged to use the most specialized section available for their use case.. Community/Standard Plugins : FAIRmat offers standardized schemas for common methods, processes, and instruments that are generalized and not tied to any individual lab or setup. These schemas are derived from recurring patterns identified across user schemas. Users can inherit from these standard plugins in a similar manner as the base sections, further specializing them as needed while still maintaining a consistent structure for broader community use. FAIRmat's Area A for synthesis data provides two community plugins, NOMAD Measurements and NOMAD Material Processing. User Defined Sections : These schemas are developed by users and are tailored for a method or an instrument, a lab, or a research institute. They build upon the base sections and community plugins, tailoring them to meet specific research needs. In this level, users can define more specialized structures that directly reflect the unique characteristics of their experiments or simulations. How These Schemas Relate to Each Other \u00b6 The relationships between these schema levels can be visualized as a layered model: Basic Architecture and Base Sections : At the core, ensuring interoperability and defining the primary structures. Community/Standard Plugins : Inherit and specialize the base sections and provide generalized versions of common user schemas, making them clearly shaped on distinct fields of materials science while still allowing broad applicability across the community. User Schemas : Inherit and specialize community plugins sections, if available, or the base sections according to given requirements. Encouraged Usage \u00b6 NOMAD encourages users to first explore the available community/standard plugins and base sections before developing their own schemas. By doing so, they can maximize interoperability and benefit from established structures, while still retaining the flexibility to adapt the schema to their unique needs. The figure below illustrates these schema levels and the recommended workflow for schema development within NOMAD. In next documentation sections, an overview of the available methods will be provided.","title":"Levels of Schema"},{"location":"explanation/levelsofschema.html#levels-of-schemas-in-nomad","text":"It is important to understand the structure and relationship of different types of schemas in NOMAD. Here we break down the levels of schemas and how they interact. For detailed information, please visit the official NOMAD documentation .","title":"Levels of schemas in NOMAD"},{"location":"explanation/levelsofschema.html#types-of-schemas-in-nomad","text":"NOMAD categorizes its schemas into multiple levels, each serving distinct purposes while ensuring consistent data organization and interoperability: Basic Architecture Sections : These define the overall structure of any entry within NOMAD, regardless of the particular data type. They provide a shared, high-level framework applicable across different use cases, ensuring that every entry adheres to a consistent format. EntryData and ArchiveSection are the two relevant classes to be mentioned here. Every entry in NOMAD must inherit from EntryData , whenever a class is only used as a subsection composed within a more general one, inheriting from ArchiveSection is enough. Base Sections : These are central to NOMAD's data model and are designed to maintain interoperability between different database entries. The base sections follow an entity-activity model tailored for materials science, capturing essential relationships between key entities like samples, instruments, processes, measurements, analyses, experiments, and simulations. The goal is to provide standardized structures for data representation. Note Base sections in NOMAD are abstract and should not be instantiated directly. Instead, users must implement these sections in their own schemas (referred to as user schemas) by inheriting from a base section and nomad.datamodel.EntryData . Users are strongly encouraged to use the most specialized section available for their use case.. Community/Standard Plugins : FAIRmat offers standardized schemas for common methods, processes, and instruments that are generalized and not tied to any individual lab or setup. These schemas are derived from recurring patterns identified across user schemas. Users can inherit from these standard plugins in a similar manner as the base sections, further specializing them as needed while still maintaining a consistent structure for broader community use. FAIRmat's Area A for synthesis data provides two community plugins, NOMAD Measurements and NOMAD Material Processing. User Defined Sections : These schemas are developed by users and are tailored for a method or an instrument, a lab, or a research institute. They build upon the base sections and community plugins, tailoring them to meet specific research needs. In this level, users can define more specialized structures that directly reflect the unique characteristics of their experiments or simulations.","title":"Types of Schemas in NOMAD"},{"location":"explanation/levelsofschema.html#how-these-schemas-relate-to-each-other","text":"The relationships between these schema levels can be visualized as a layered model: Basic Architecture and Base Sections : At the core, ensuring interoperability and defining the primary structures. Community/Standard Plugins : Inherit and specialize the base sections and provide generalized versions of common user schemas, making them clearly shaped on distinct fields of materials science while still allowing broad applicability across the community. User Schemas : Inherit and specialize community plugins sections, if available, or the base sections according to given requirements.","title":"How These Schemas Relate to Each Other"},{"location":"explanation/levelsofschema.html#encouraged-usage","text":"NOMAD encourages users to first explore the available community/standard plugins and base sections before developing their own schemas. By doing so, they can maximize interoperability and benefit from established structures, while still retaining the flexibility to adapt the schema to their unique needs. The figure below illustrates these schema levels and the recommended workflow for schema development within NOMAD. In next documentation sections, an overview of the available methods will be provided.","title":"Encouraged Usage"},{"location":"explanation/schemas.html","text":"PDI NOMAD Plugin \u00b6 The PDI NOMAD Plugin contains schemas for different synthesis methods. An overview of the package structure is shown below. Technical description \u00b6 There are some technical aspects to understand the Python package built for this plugin, they are not crucial for the data model understanding itself: It is structured according to the src layout . It is a regular Python package , i. e., the structure is defined by the presence of __init__.py files. Each of these files contains one or multiple entry points . These are used to load a portion of the code within your NOMAD through a specific section in the nomad.yaml file. It is pip installable. The project.toml file defines what will be installed, the dependencies, further details. The entry points included are listed in this file. nomad-material-processing/ \u251c\u2500\u2500 docs \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 pdi_nomad_plugin \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 utils.py \u2502 \u251c\u2500\u2500 general \u2502 \u2502 \u2514\u2500\u2500 schema.py \u2502 \u251c\u2500\u2500 mbe \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 instrument.py \u2502 \u2502 \u251c\u2500\u2500 materials.py \u2502 \u2502 \u251c\u2500\u2500 processes.py \u2502 \u2502 \u251c\u2500\u2500 epic_parser \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 parser.py \u2502 \u2502 \u2514\u2500\u2500 mbe_app \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 characterization \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 schema.py \u2514\u2500\u2500 tests \u2514\u2500\u2500 data \u2514\u2500\u2500 mbe Data model description \u00b6 Each method has a dedicated module , i. e., a python file. Dependencies \u00b6 This plugin uses the NOMAD community plugins. Check the repos and their documentations: nomad-material-processing repo , nomad-material-processing docs nomad-measurements repo , nomad-measurements docs mbe.materials \u00b6 mbe.processes \u00b6 mbe.instrument \u00b6 nomad_material_processing.solution.general \u00b6 solution.general module contains the following entry sections (used to create NOMAD entries ): Solution \u00b6 Describes liquid solutions by extending the CompositeSystem with quantities: pH , mass , calculated_volume , measured_volume , density , and sub-sections: solvents , solutes , and solution_storage . # pseudocode for `Solution` datamodel class Solution ( CompositeSystem , EntryData ): ph_value : float mass : float calculated_volume : float measured_volume : float density : float components : list [ Union ( SolutionComponent , SolutionComponentReference , ) ] solutes : list [ SolutionComponent ] solvents : list [ SolutionComponent ] solution_storage : SolutionStorage Hint The measured_volume field is user-defined. By default, the automation in Solution uses calculated_volume , but if measured_volume is provided, it will take precedence. This is useful when the final solution volume differs from the sum of its component volumes, and should be specified by the user. The components sub-section, inherited from CompositeSystem and re-defined, is used to describe a list of components used in the solution. Each of them contributes to the mass and calculated_volume of the solution. The component can either nest a sub-section describing its composition, or can be another Solution entry connected via reference. These options are are handled by SolutionComponent and SolutionComponentReference sections respectively. Let's take a closer look at each of them. SolutionComponent extends PureSubstanceComponent with quantities: component_role , mass , volume , density , and sub-section: molar_concentration . The pure_substance sub-section inherited from PureSubstanceComponent specifies the chemical compound. This information along with the mass of the component and total volume of the solution is used to automatically determine the molar concentration of the component, populating the corresponding sub-section. Based on the component_role , the components are copied over to either Solution.solvents or Solution.solutes . class SolutionComponent ( PureSubstanceComponent ): component_role : Enum ( 'Solvent' , 'Solute' ) mass : float volume : float density : float molar_concentration : MolarConcentration SolutionComponentReference makes a reference to another Solution entry and specifies the amount used. Based on this, solutes and solvents of the referenced solution are copied over to the first solution. Their mass and volume are adjusted based on the amount of the referenced solution used. class SolutionComponentReference ( SystemComponent ): mass : float volume : float system : Solution Both Solution.solvents and Solution.solutes are a list of SolutionComponent . The molar concentration of each of them is automatically determined. Additionally, if the list has multiple SolutionComponent representing the same chemical entity, there are combined into one. The solution_storage uses SolutionStorage section to describe storage conditions , i.e., temperature and atmosphere, along with preparation and expiry dates. SolutionPreparation \u00b6 Extends Process to describe the recipe for solution preparation. It generates a Solution entry based on the data added to it.","title":"Schemas"},{"location":"explanation/schemas.html#pdi-nomad-plugin","text":"The PDI NOMAD Plugin contains schemas for different synthesis methods. An overview of the package structure is shown below.","title":"PDI NOMAD Plugin"},{"location":"explanation/schemas.html#technical-description","text":"There are some technical aspects to understand the Python package built for this plugin, they are not crucial for the data model understanding itself: It is structured according to the src layout . It is a regular Python package , i. e., the structure is defined by the presence of __init__.py files. Each of these files contains one or multiple entry points . These are used to load a portion of the code within your NOMAD through a specific section in the nomad.yaml file. It is pip installable. The project.toml file defines what will be installed, the dependencies, further details. The entry points included are listed in this file. nomad-material-processing/ \u251c\u2500\u2500 docs \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 pdi_nomad_plugin \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 utils.py \u2502 \u251c\u2500\u2500 general \u2502 \u2502 \u2514\u2500\u2500 schema.py \u2502 \u251c\u2500\u2500 mbe \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 instrument.py \u2502 \u2502 \u251c\u2500\u2500 materials.py \u2502 \u2502 \u251c\u2500\u2500 processes.py \u2502 \u2502 \u251c\u2500\u2500 epic_parser \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 parser.py \u2502 \u2502 \u2514\u2500\u2500 mbe_app \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 characterization \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 schema.py \u2514\u2500\u2500 tests \u2514\u2500\u2500 data \u2514\u2500\u2500 mbe","title":"Technical description"},{"location":"explanation/schemas.html#data-model-description","text":"Each method has a dedicated module , i. e., a python file.","title":"Data model description"},{"location":"explanation/schemas.html#dependencies","text":"This plugin uses the NOMAD community plugins. Check the repos and their documentations: nomad-material-processing repo , nomad-material-processing docs nomad-measurements repo , nomad-measurements docs","title":"Dependencies"},{"location":"explanation/schemas.html#mbematerials","text":"","title":"mbe.materials"},{"location":"explanation/schemas.html#mbeprocesses","text":"","title":"mbe.processes"},{"location":"explanation/schemas.html#mbeinstrument","text":"","title":"mbe.instrument"},{"location":"explanation/schemas.html#nomad_material_processingsolutiongeneral","text":"solution.general module contains the following entry sections (used to create NOMAD entries ):","title":"nomad_material_processing.solution.general"},{"location":"explanation/schemas.html#solution","text":"Describes liquid solutions by extending the CompositeSystem with quantities: pH , mass , calculated_volume , measured_volume , density , and sub-sections: solvents , solutes , and solution_storage . # pseudocode for `Solution` datamodel class Solution ( CompositeSystem , EntryData ): ph_value : float mass : float calculated_volume : float measured_volume : float density : float components : list [ Union ( SolutionComponent , SolutionComponentReference , ) ] solutes : list [ SolutionComponent ] solvents : list [ SolutionComponent ] solution_storage : SolutionStorage Hint The measured_volume field is user-defined. By default, the automation in Solution uses calculated_volume , but if measured_volume is provided, it will take precedence. This is useful when the final solution volume differs from the sum of its component volumes, and should be specified by the user. The components sub-section, inherited from CompositeSystem and re-defined, is used to describe a list of components used in the solution. Each of them contributes to the mass and calculated_volume of the solution. The component can either nest a sub-section describing its composition, or can be another Solution entry connected via reference. These options are are handled by SolutionComponent and SolutionComponentReference sections respectively. Let's take a closer look at each of them. SolutionComponent extends PureSubstanceComponent with quantities: component_role , mass , volume , density , and sub-section: molar_concentration . The pure_substance sub-section inherited from PureSubstanceComponent specifies the chemical compound. This information along with the mass of the component and total volume of the solution is used to automatically determine the molar concentration of the component, populating the corresponding sub-section. Based on the component_role , the components are copied over to either Solution.solvents or Solution.solutes . class SolutionComponent ( PureSubstanceComponent ): component_role : Enum ( 'Solvent' , 'Solute' ) mass : float volume : float density : float molar_concentration : MolarConcentration SolutionComponentReference makes a reference to another Solution entry and specifies the amount used. Based on this, solutes and solvents of the referenced solution are copied over to the first solution. Their mass and volume are adjusted based on the amount of the referenced solution used. class SolutionComponentReference ( SystemComponent ): mass : float volume : float system : Solution Both Solution.solvents and Solution.solutes are a list of SolutionComponent . The molar concentration of each of them is automatically determined. Additionally, if the list has multiple SolutionComponent representing the same chemical entity, there are combined into one. The solution_storage uses SolutionStorage section to describe storage conditions , i.e., temperature and atmosphere, along with preparation and expiry dates.","title":"Solution"},{"location":"explanation/schemas.html#solutionpreparation","text":"Extends Process to describe the recipe for solution preparation. It generates a Solution entry based on the data added to it.","title":"SolutionPreparation"},{"location":"how_to/develop.html","text":"How to Contribute to the NOMAD-material-processing Plugin \u00b6 The NOMAD Material Processing Plugin is a community-driven effort aimed at providing shared data schemas, readers, and parsers for material processing data. We encourage contributions from all users to help enhance and expand the plugin, making it more robust and broadly applicable. If you have any questions or need assistance, feel free to contact us \u2014 we\u2019re here to help you get involved! Here\u2019s how you can contribute: 1. Setting up a development environment \u00b6 To make code contributions to this package, you need to setup a local development environment. It starts with cloning this repo in a local folder. Create a fresh Python environment and install the package in editable mode (with -e flag) with its dev dependencies. pytest package is installed as a part of the dev dependencies. To run the tests locally, you can simply run pytest in the topmost folder of the repo. git clone git@github.com:FAIRmat-NFDI/nomad-material-processing.git cd nomad-material-processing python3.11 -m venv .pyenv source .pyenv/bin/activate pip install -e . [ dev ] --index-url https://gitlab.mpcdf.mpg.de/api/v4/projects/2187/packages/pypi/simple pytest 2. Extract General Components from Your Custom Schema \u00b6 If you have developed custom schemas for your own lab or project, consider extracting the generalizable aspects and contributing them to the community plugin. Look for data structures, methods, or components that are not specific to your setup but could benefit the wider community. By sharing these, you help build a richer, more comprehensive plugin that everyone can use. 3. Test in Your Own Plugin \u00b6 Before submitting contributions, it\u2019s important to test your changes in your own NOMAD plugin environment. This ensures that your extracted schema or code functions as expected and aligns with the overall plugin structure. Testing locally also helps identify potential conflicts or improvements before making a broader contribution. 4. Open an Issue \u00b6 If you have suggestions, questions, or encounter any issues while using or developing the plugin, feel free to open an issue on the plugin\u2019s GitHub repository. This helps maintainers and other contributors track potential improvements or areas of concern. Be as detailed as possible, providing relevant context and, if applicable, examples of the issue you're encountering. 5. Create a Pull Request \u00b6 Once you\u2019ve tested your contribution and are confident it benefits the community, create a pull request (PR). In your PR, clearly describe what changes you are proposing and why they are necessary. If you\u2019re contributing general components extracted from your custom schema, explain how they can be applied broadly across different use cases. Be sure to follow the repository's contribution guidelines and reference any related issues if applicable. By contributing to this plugin, you are helping build a more cohesive and interoperable materials science data ecosystem. We appreciate your input and collaboration!","title":"Contribute to this Plugin"},{"location":"how_to/develop.html#how-to-contribute-to-the-nomad-material-processing-plugin","text":"The NOMAD Material Processing Plugin is a community-driven effort aimed at providing shared data schemas, readers, and parsers for material processing data. We encourage contributions from all users to help enhance and expand the plugin, making it more robust and broadly applicable. If you have any questions or need assistance, feel free to contact us \u2014 we\u2019re here to help you get involved! Here\u2019s how you can contribute:","title":"How to Contribute to the NOMAD-material-processing Plugin"},{"location":"how_to/develop.html#1-setting-up-a-development-environment","text":"To make code contributions to this package, you need to setup a local development environment. It starts with cloning this repo in a local folder. Create a fresh Python environment and install the package in editable mode (with -e flag) with its dev dependencies. pytest package is installed as a part of the dev dependencies. To run the tests locally, you can simply run pytest in the topmost folder of the repo. git clone git@github.com:FAIRmat-NFDI/nomad-material-processing.git cd nomad-material-processing python3.11 -m venv .pyenv source .pyenv/bin/activate pip install -e . [ dev ] --index-url https://gitlab.mpcdf.mpg.de/api/v4/projects/2187/packages/pypi/simple pytest","title":"1. Setting up a development environment"},{"location":"how_to/develop.html#2-extract-general-components-from-your-custom-schema","text":"If you have developed custom schemas for your own lab or project, consider extracting the generalizable aspects and contributing them to the community plugin. Look for data structures, methods, or components that are not specific to your setup but could benefit the wider community. By sharing these, you help build a richer, more comprehensive plugin that everyone can use.","title":"2. Extract General Components from Your Custom Schema"},{"location":"how_to/develop.html#3-test-in-your-own-plugin","text":"Before submitting contributions, it\u2019s important to test your changes in your own NOMAD plugin environment. This ensures that your extracted schema or code functions as expected and aligns with the overall plugin structure. Testing locally also helps identify potential conflicts or improvements before making a broader contribution.","title":"3. Test in Your Own Plugin"},{"location":"how_to/develop.html#4-open-an-issue","text":"If you have suggestions, questions, or encounter any issues while using or developing the plugin, feel free to open an issue on the plugin\u2019s GitHub repository. This helps maintainers and other contributors track potential improvements or areas of concern. Be as detailed as possible, providing relevant context and, if applicable, examples of the issue you're encountering.","title":"4. Open an Issue"},{"location":"how_to/develop.html#5-create-a-pull-request","text":"Once you\u2019ve tested your contribution and are confident it benefits the community, create a pull request (PR). In your PR, clearly describe what changes you are proposing and why they are necessary. If you\u2019re contributing general components extracted from your custom schema, explain how they can be applied broadly across different use cases. Be sure to follow the repository's contribution guidelines and reference any related issues if applicable. By contributing to this plugin, you are helping build a more cohesive and interoperable materials science data ecosystem. We appreciate your input and collaboration!","title":"5. Create a Pull Request"},{"location":"how_to/install.html","text":"How to install this plugin \u00b6 This plugin can be used in a NOMAD Oasis installation. Please visit the NOMAD documentation for details on how to setup an NOMAD Oasis . Add This Plugin to Your NOMAD Oasis installation \u00b6 Read the NOMAD plugin documentation for all details on how to deploy the plugin on your NOMAD instance. We recommend writing your own NOMAD docker image which includes the NOMAD plugins you want to deploy. Please follow these instructions to set up your own NOMAD image writing workflow. You need to modify the plugins.txt file and add the following lines: nomad-material-processing This will add the latest version of the NOMAD-material-processing Plugin to your NOMAD Oasis image. If you want to add a specific version of the plugin you will need to provide the specific version tag or commit sha, for example: nomad-material-processing==0.1.0 or git+https://github.com/FAIRmat-NFDI/nomad-material-processing.git@f19c0e3b175613ec026ef36c849af3474c42cf52","title":"Install this Plugin"},{"location":"how_to/install.html#how-to-install-this-plugin","text":"This plugin can be used in a NOMAD Oasis installation. Please visit the NOMAD documentation for details on how to setup an NOMAD Oasis .","title":"How to install this plugin"},{"location":"how_to/install.html#add-this-plugin-to-your-nomad-oasis-installation","text":"Read the NOMAD plugin documentation for all details on how to deploy the plugin on your NOMAD instance. We recommend writing your own NOMAD docker image which includes the NOMAD plugins you want to deploy. Please follow these instructions to set up your own NOMAD image writing workflow. You need to modify the plugins.txt file and add the following lines: nomad-material-processing This will add the latest version of the NOMAD-material-processing Plugin to your NOMAD Oasis image. If you want to add a specific version of the plugin you will need to provide the specific version tag or commit sha, for example: nomad-material-processing==0.1.0 or git+https://github.com/FAIRmat-NFDI/nomad-material-processing.git@f19c0e3b175613ec026ef36c849af3474c42cf52","title":"Add This Plugin to Your NOMAD Oasis installation"},{"location":"how_to/use_this_plugin.html","text":"How to Use the pdi-nomad-plugin Plugin \u00b6 Classes \u00b6 In this section, the custom classes included in this plugin, and the processing associated to them, will be showed. ExperimentMbePDI \u00b6 Package path: pdi_nomad_plugin.mbe.processes.ExperimentMbePDI Inheriting from: nomad.datamodel.metainfo.basesections.Experiment , nomad.datamodel.data.EntryData Usage: This class must be instantiated manually from ELN and must be filled with `","title":"Use this Plugin"},{"location":"how_to/use_this_plugin.html#how-to-use-the-pdi-nomad-plugin-plugin","text":"","title":"How to Use the pdi-nomad-plugin Plugin"},{"location":"how_to/use_this_plugin.html#classes","text":"In this section, the custom classes included in this plugin, and the processing associated to them, will be showed.","title":"Classes"},{"location":"how_to/use_this_plugin.html#experimentmbepdi","text":"Package path: pdi_nomad_plugin.mbe.processes.ExperimentMbePDI Inheriting from: nomad.datamodel.metainfo.basesections.Experiment , nomad.datamodel.data.EntryData Usage: This class must be instantiated manually from ELN and must be filled with `","title":"ExperimentMbePDI"},{"location":"reference/references.html","text":"Technical References \u00b6 NOMAD Metainfo Browser \u00b6 Allows users to explore all available schemas, including their sections, values, and references, in a detailed and interactive manner. It can be accessed through the Analyze tab in any NOMAD instance. To explore the schemas specific to the NOMAD-material-processing plugin, you can visit the Metainfo Browser on the Example Oasis and review all the details of the plugin's structures and components. Glossary \u00b6 subclass \u00b6 Inheritance of classes. Whenever a Python class inherits from another one, this is called subclass , meaning that it is semantically a children of the inherited one. subsection \u00b6 Composition of classes. A class can contain some subsection nested (or composed ) inside it. These classes are not related by inheritance relationship. Info Please also refer to the glossary in the NOMAD documentation to find definitions and explanations for specific technical terms used throughout the NOMAD software.","title":"References"},{"location":"reference/references.html#technical-references","text":"","title":"Technical References"},{"location":"reference/references.html#nomad-metainfo-browser","text":"Allows users to explore all available schemas, including their sections, values, and references, in a detailed and interactive manner. It can be accessed through the Analyze tab in any NOMAD instance. To explore the schemas specific to the NOMAD-material-processing plugin, you can visit the Metainfo Browser on the Example Oasis and review all the details of the plugin's structures and components.","title":"NOMAD Metainfo Browser"},{"location":"reference/references.html#glossary","text":"","title":"Glossary"},{"location":"reference/references.html#subclass","text":"Inheritance of classes. Whenever a Python class inherits from another one, this is called subclass , meaning that it is semantically a children of the inherited one.","title":"subclass"},{"location":"reference/references.html#subsection","text":"Composition of classes. A class can contain some subsection nested (or composed ) inside it. These classes are not related by inheritance relationship. Info Please also refer to the glossary in the NOMAD documentation to find definitions and explanations for specific technical terms used throughout the NOMAD software.","title":"subsection"},{"location":"tutorial/tutorial.html","text":"There is no specific tutorial available for the NOMAD-material-processing plugin at the moment. However, to learn more about related topics, we encourage you to explore the FAIRmat Tutorial series . These tutorials cover a wide range of topics related to data management, material processing, and the principles of the FAIR (Findable, Accessible, Interoperable, and Reusable) approach. The FAIRmat tutorials will provide you with valuable insights into how to manage and structure materials data in NOMAD and how to contribute to community efforts like this plugin. Stay tuned for future updates, as specific tutorials for this plugin may be developed. FAIRmat Tutorial 13: NOMAD for Experimental Data Management in Synthesis FAIRmat Tutorial 12: Getting started with NOMAD and NOMAD Oasis for research data management (RDM) FAIRmat Tutorial 8: Using NOMAD as an Electronic lab notebook (ELN) for FAIR data","title":"Tutorials"}]}